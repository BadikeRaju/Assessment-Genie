import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { Textarea } from '@/components/ui/textarea';
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select';

const topicOptions = [
  "Mathematics",
  "Physics",
  "Chemistry",
  "Biology",
  "Computer Science",
  "History",
  "Geography",
  "Literature",
  "Language Arts",
  "Economics"
];

interface TopicRequest {
  topic: string;
  description: string;
  status: 'pending' | 'approved' | 'rejected';
  createdAt: Date;
}

const SamplesRequest = () => {
  const { toast } = useToast();
  const [selectedTopic, setSelectedTopic] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [samples, setSamples] = useState<string[]>([]);
  const [isRequestOpen, setIsRequestOpen] = useState(false);
  const [newTopicRequest, setNewTopicRequest] = useState({
    topic: '',
    description: ''
  });

  const handleRequestSamples = () => {
    if (!selectedTopic) {
      toast({
        title: "Topic Required",
        description: "Please select a topic to view samples",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);
    
    // Simulate API call
    setTimeout(() => {
      // Mock sample questions
      const mockSamples = [
        `What is the primary function of ${selectedTopic} in modern applications?`,
        `Explain the core principles of ${selectedTopic} with examples.`,
        `Compare and contrast traditional vs. contemporary approaches to ${selectedTopic}.`,
        `What role does ${selectedTopic} play in solving real-world problems?`,
      ];
      
      setSamples(mockSamples);
      setIsLoading(false);
      
      toast({
        title: "Samples Retrieved",
        description: `Successfully loaded 4 sample questions for ${selectedTopic}`,
      });
    }, 1500);
  };

  const handleTopicRequest = () => {
    if (!newTopicRequest.topic.trim() || !newTopicRequest.description.trim()) {
      toast({
        title: "Missing Information",
        description: "Please provide both topic name and description",
        variant: "destructive"
      });
      return;
    }

    // Here you would typically make an API call to save the request
    // For now, we'll simulate it
    setTimeout(() => {
      toast({
        title: "Request Submitted",
        description: "Your topic request has been sent to the admins for review.",
      });
      setIsRequestOpen(false);
      setNewTopicRequest({ topic: '', description: '' });
    }, 1000);
  };

  return (
    <Card className="w-full animate-scale-in card-hover">
      <CardHeader>
        <CardTitle>View Samples</CardTitle>
        <CardDescription>
          Select a topic to view sample questions generated by our system
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <Label htmlFor="topic">Topic</Label>
              <Dialog open={isRequestOpen} onOpenChange={setIsRequestOpen}>
                <DialogTrigger asChild>
                  <Button variant="link" className="text-xs">
                    Request New Topic
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Request New Topic</DialogTitle>
                    <DialogDescription>
                      Submit a request for a new topic to be added to our sample questions.
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4 py-4">
                    <div className="space-y-2">
                      <Label htmlFor="topicName">Topic Name</Label>
                      <Input
                        id="topicName"
                        placeholder="Enter the topic name"
                        value={newTopicRequest.topic}
                        onChange={(e) => setNewTopicRequest(prev => ({ ...prev, topic: e.target.value }))}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="description">Description</Label>
                      <Textarea
                        id="description"
                        placeholder="Why do you need this topic? Provide some context..."
                        value={newTopicRequest.description}
                        onChange={(e) => setNewTopicRequest(prev => ({ ...prev, description: e.target.value }))}
                      />
                    </div>
                  </div>
                  <DialogFooter>
                    <Button variant="outline" onClick={() => setIsRequestOpen(false)}>
                      Cancel
                    </Button>
                    <Button onClick={handleTopicRequest}>
                      Submit Request
                    </Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            </div>
            <Select value={selectedTopic} onValueChange={setSelectedTopic}>
              <SelectTrigger>
                <SelectValue placeholder="Select a topic" />
              </SelectTrigger>
              <SelectContent>
                {topicOptions.map((topic) => (
                  <SelectItem key={topic} value={topic}>{topic}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <Button 
            onClick={handleRequestSamples} 
            disabled={isLoading} 
            className="w-full button-glow"
          >
            {isLoading ? "Loading..." : "View Samples"}
          </Button>

          {samples.length > 0 && (
            <div className="mt-6 space-y-4 animate-fade-in">
              <h3 className="text-lg font-medium">Sample Questions</h3>
              <ul className="space-y-3">
                {samples.map((sample, index) => (
                  <li key={index} className="p-3 rounded-md bg-secondary/50 border border-border/50">
                    {sample}
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </CardContent>
      <CardFooter className="flex justify-between border-t pt-6">
        <p className="text-sm text-muted-foreground">
          View samples before generating full question sets
        </p>
      </CardFooter>
    </Card>
  );
};

export default SamplesRequest;
